@page "/mocktest"

@using MudBlazor
@using System.Net.Http.Json
@using Resume.Application.DTOs
@inject ResumeApiClient ResumeApiClient

<PageTitle>Mock Test</PageTitle>

<MudPaper Elevation="4" Class="pa-4">
    <MudText Typo="Typo.h4" Class="mb-4">MCQ Test</MudText>

    @if (!isEnterPressed && !isLoading)
    {
        <MudTextField @bind-Value="skillName" Label="Enter Skill Name" Placeholder="e.g., C#" OnKeyDown="HandleKeyDown" Immediate="true" />
    }
    else if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (questions != null && questions.Any())
    {
        @if (isTestCompleted)
        {
            <MudText Typo="Typo.h5" Class="mb-2">Test Completed!</MudText>
            <MudText Typo="Typo.body1" Class="mb-4">Your Score: @score / @questions.Count</MudText>
            <MudProgressLinear Class="mb-4" Color="Color.Primary" Value="@(score * 100 / questions.Count)" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ResetTest">Retake Test</MudButton>
        }
        else
        {
            <MudText Typo="Typo.h5" Class="mb-2">@questions[currentQuestionIndex].Question</MudText>
            <MudText Typo="Typo.body2" Class="mb-2">Question @(@currentQuestionIndex + 1) of @questions.Count</MudText>

            <MudList T="AnswerOptions">
                @foreach (var option in questions[currentQuestionIndex].Options)
                {
                    <MudListItem T="AnswerOptions" Class="@GetOptionClass(option.OptionNumber)" Disabled="@isAnswered" OnClick="@(() => SelectOption(option.OptionNumber))">
                        @option.OptionNumber. @option.Option
                    </MudListItem>
                }
            </MudList>

            @if (isAnswered)
            {
                <MudText Typo="Typo.body1" Class="mt-2">@questions[currentQuestionIndex].CorrectAnswerExplanation</MudText>
            }

            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" Disabled="!isAnswered" OnClick="NextQuestion">Next</MudButton>
        }
    }
    else
    {
        <MudText Typo="Typo.body1">No questions available for the selected skill.</MudText>
    }
</MudPaper>

@code {
    private List<MockTestDto> questions;
    private int currentQuestionIndex = 0;
    private bool isAnswered = false;
    private bool isTestCompleted = false;
    private int score = 0;
    private string skillName = string.Empty;
    private bool isLoading = false;
    private bool isEnterPressed = false;

    private async Task LoadQuestions()
    {
        isLoading = true;
        questions = await ResumeApiClient.GetMockTest(System.Net.WebUtility.HtmlEncode(skillName));
        isLoading = false;
        isEnterPressed = true;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadQuestions();
        }
    }

    private void SelectOption(int optionNumber)
    {
        if (!isAnswered)
        {
            isAnswered = true;
            if (optionNumber == questions[currentQuestionIndex].CorrectAnswer)
            {
                score++;
            }
        }
    }

    private void NextQuestion()
    {
        if (currentQuestionIndex < questions.Count - 1)
        {
            currentQuestionIndex++;
            isAnswered = false;
        }
        else
        {
            isTestCompleted = true;
        }
    }

    private void ResetTest()
    {
        skillName = string.Empty;
        currentQuestionIndex = 0;
        isAnswered = false;
        isTestCompleted = false;
        score = 0;
        questions = null;
    }

    private string GetOptionClass(int optionNumber)
    {
        if (!isAnswered)
        {
            return "";
        }

        if (optionNumber == questions[currentQuestionIndex].CorrectAnswer)
        {
            return "mud-success-text";
        }

        return "mud-error-text";
    }
}
