@page "/mocktest"


<link rel="stylesheet" href="/mocktest.style.css" />
@using MudBlazor
@using System.Net.Http.Json
@using Resume.Application.DTOs
@inject ResumeApiClient ResumeApiClient

<PageTitle>Mock Test</PageTitle>

<MudPaper Elevation="4" Class="pa-4">
    @if (!isEnterPressed && !isLoading)
    {
        <TextBoxCenter @bind-Value="skillName" Label="Enter Skill Name" Placeholder="Enter a skill to start test!" OnKeyDown="HandleKeyDown" IsLabelEnabled="false" Immediate="true" />
    }
    else if (isLoading)
    {
        <LoadingOverlay IsVisible="true" />
    }
    else if (questions != null && questions.Any())
    {
        @if (isTestCompleted)
        {
            <MudChart ChartType="ChartType.Donut" Width="200px" Height="200px" InputData="@rightandwrong" InputLabels="@labels">
                <CustomGraphics>
                    <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">
                        @($"{score * 20}%")
                    </text>
                </CustomGraphics>
            </MudChart>
        }
        else
        {
            <div class="container mt-sm-5 my-1">
            <div class="question ml-sm-5 pl-sm-5 pt-2">
                <div class="py-2 h5"><b>@questions[currentQuestionIndex].Question</b></div>
                <div class="ml-md-3 ml-sm-3 pl-md-5 pt-sm-0 pt-3" id="options">
                    @foreach (var option in questions[currentQuestionIndex].Options)
                    {
                        <label class="options">
                            @option.Option
                            <input type="radio" name="radio" value="@option.OptionNumber" 
                                   @onclick="@(() => SelectOption(option.OptionNumber))"
                                   disabled="@(isAnswered)"
                                   checked="@(selectedOption == option.OptionNumber)">
                            <span class="checkmark"></span>
                        </label>
                    }
                </div>
            </div>
            @if (isAnswered)
            {
                <div class="mt-3">
                    <MudText Typo="Typo.body1">@questions[currentQuestionIndex].CorrectAnswerExplanation</MudText>
                </div>
            }
            <div class="d-flex align-items-center pt-3">
                <div id="prev">
                    @* @if (currentQuestionIndex > 0)
                    {
                        <button class="btn btn-primary" disabled title="We don't allow to go to previous questions now.'">Previous</button>
                    } *@
                </div>
                <div class="ml-auto mr-sm-5">
                    @if (isAnswered)
                    {
                        <button class="btn btn-success" @onclick="NextQuestion">Next</button>
                    }
                </div>
            </div>
        </div>
        }
    }
    else
    {
        <MudText Typo="Typo.body1">No questions available for the selected skill.</MudText>
    }
</MudPaper>

@code {
    private List<MockTestDto> questions;
    private int currentQuestionIndex = 0;
    private bool isAnswered = false;
    private bool isTestCompleted = false;
    private int score = 0;
    private string skillName = string.Empty;
    private bool isLoading = false;
    private bool isEnterPressed = false;
    public double[] rightandwrong = new double[]{ 0,0 };
    public string[] labels = { "Right", "Wrong" };
    private int? selectedOption = null; // Track selected option

    private async Task LoadQuestions()
    {
        isLoading = true;
        questions = await ResumeApiClient.GetMockTest(System.Net.WebUtility.HtmlEncode(skillName));
        isLoading = false;
        isEnterPressed = true;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadQuestions();
        }
    }

    private void SelectOption(int optionNumber)
    {
        selectedOption = optionNumber;
        if (!isAnswered)
        {
            isAnswered = true;
            if (optionNumber == questions[currentQuestionIndex].CorrectAnswer)
            {
                score++;
            }
        }
    }

    private void NextQuestion()
    {
        if (currentQuestionIndex < questions.Count - 1)
        {
            currentQuestionIndex++;
            isAnswered = false;
            selectedOption = null;
        }
        else
        {
            isTestCompleted = true;
            rightandwrong = new double[] { score, 5 - score };
            selectedOption = null;
        }
    }

    private void ResetTest()
    {
        skillName = string.Empty;
        currentQuestionIndex = 0;
        isAnswered = false;
        isTestCompleted = false;
        score = 0;
        questions = null;
        selectedOption = null;
    }

    private string GetOptionClass(int optionNumber)
    {
        if (!isAnswered)
        {
            return "";
        }

        if (optionNumber == questions[currentQuestionIndex].CorrectAnswer)
        {
            return "mud-success-text";
        }

        return "mud-error-text";
    }
}
