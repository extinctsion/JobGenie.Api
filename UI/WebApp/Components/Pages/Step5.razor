@using Resume.Application.DTOs
<MudPaper Class="pa-4" Style="height: 100%;">
    <div>
        <h4>Education</h4>
        @foreach (var education in educations.Select((value, index) => new { value, index }))
        {
            <TextBoxCenter @bind-Value="educations[education.index].InstitutionName" Label="" Placeholder="Institution Name" />
            <TextBoxCenter @bind-Value="educations[education.index].Address" Label="" Placeholder="Address" />
            <TextBoxCenter @bind-Value="educations[education.index].Duration" Label="" Placeholder="Duration" />
            <TextBoxCenter @bind-Value="educations[education.index].Degree" Label="" Placeholder="Degree" />
        }
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="AddEducation">Add Education</MudButton>
    </div>

    <StepperNavigation Previous="Previous" Next="Next" DisablePrevious="false" />
</MudPaper>

@code {
    [Parameter] public EventCallback<List<EducationRequestDto>> EducationsChanged { get; set; }
    [Parameter] public EventCallback NextStep { get; set; }
    [Parameter] public EventCallback PreviousStep { get; set; }

    private List<EducationRequestDto> educations = new() { new EducationRequestDto() }; // Start with one empty education

    private void AddEducation()
    {
        if (!string.IsNullOrWhiteSpace(educations.LastOrDefault()?.InstitutionName))
        {
            educations.Add(new EducationRequestDto()); // Add a new empty education input only if the last one has an institution name
        }
    }

    private async Task Next()
    {
        // Clean up empty entries
        educations = educations.Where(e => !string.IsNullOrWhiteSpace(e.InstitutionName)).ToList();
        await EducationsChanged.InvokeAsync(educations);
        await NextStep.InvokeAsync();
    }

    private async Task Previous()
    {
        await PreviousStep.InvokeAsync();
    }
}
