@page "/generateresume"

@using MudBlazor
@using System.Net.Http.Json
@using Resume.Application.DTOs
@inject IJSRuntime JS
@inject ResumeApiClient ResumeApiClient

<PageTitle>Generate Resume</PageTitle>

<MudGrid>
    @if (!isGenerated)
    {
        <!-- Stepper Form Section -->
        <MudItem xs="12" sm="12">
            <MudPaper Class="pa-4" Style="height: 100%;">
                <Stepper CurrentStep="@currentStep" StepNames="@stepNames" />
                @if (currentStep == 0)
                {
                    <Step1 NameChanged="HandleNameChanged" NextStep="NextStep" />
                }
                else if (currentStep == 1)
                {
                    <Step2 EmailChanged="HandleEmailChanged" NextStep="NextStep" PreviousStep="PreviousStep" />
                }
                else if (currentStep == 2)
                {
                    <Step3 SkillsChanged="HandleSkillsChanged" InterestsChanged="HandleInterestsChanged" NextStep="NextStep" PreviousStep="PreviousStep" />
                }
                else if (currentStep == 3)
                {
                    <Step4 ProjectsChanged="HandleProjectsChanged" NextStep="NextStep" PreviousStep="PreviousStep" />
                }
                else if (currentStep == 4)
                {
                    <Step5 EducationsChanged="HandleEducationsChanged" NextStep="NextStep" PreviousStep="PreviousStep" />
                }
                else if (currentStep == 5)
                {
                    <Step6 ExperiencesChanged="HandleExperiencesChanged" Submit="Submit" PreviousStep="PreviousStep" />
                }
            </MudPaper>
        </MudItem>
    }
    else
    {
        <!-- PDF Viewer Section -->
        <MudItem xs="12" sm="12">
            <MudPaper Class="pa-4" Style="height: 100%; overflow: hidden;">
                <ResumeComponent Resume="@resumeDto" />
                <LoadingOverlay IsVisible="@isSubmitting" />
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@if (!string.IsNullOrEmpty(response))
{
    <MudAlert Severity="MudBlazor.Severity.Success">@response</MudAlert>
}

@if (isGenerated)
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DownloadResume">Download Resume</MudButton>
}

@code {
    private int currentStep = 0;
    private string? FirstName;
    private string? LastName;
    private string? Email;
    private string? Phone;
    private string? Position = "";
    private List<ExperienceRequestDto> experiences = new();
    private List<EducationRequestDto> educations = new();
    private List<ProjectRequestDto> projects = new();
    private List<string> skills = new();
    private List<string> interests = new();
    private string response = "AI will generate your resume!";
    private ResumeDto resumeDto = new();
    private bool isSubmitting = false;
    private bool isGenerated = false;
    private string[] stepNames = new string[]
    {
        "Personal Details", "Contact Information", "Skills", "Projects", "Education", "Experience"
    };

    protected override async Task OnInitializedAsync()
    {
        ResumeDtoResponse sampleResumeCreator = new ResumeDtoResponse();
        resumeDto =  sampleResumeCreator.GetSampleInstance().Resume;
    }

    private void NextStep()
    {
        if (currentStep < 5) // Ensure it doesn't go beyond the last step
        {
            currentStep++;
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 0) // Ensure it doesn't go below the first step
        {
            currentStep--;
        }
    }

    private void HandleNameChanged(string newName)
    {
        FirstName = newName.Split(' ')[0];
        LastName = newName.Split(' ').Length > 1 ? newName.Split(' ')[1] : string.Empty;
    }

    private void HandleLastNameChanged(string newLastName)
    {
        LastName = newLastName;
    }

    private void HandlePhoneChanged(string newPhone)
    {
        Phone = newPhone;
    }

    private void HandlePositionChanged(string newPosition)
    {
        Position = newPosition;
    }

    private void HandleEmailChanged(string newEmail)
    {
        Email = newEmail;
    }

    private void HandleExperiencesChanged(List<ExperienceRequestDto> newExperiences)
    {
        experiences = newExperiences;
    }

    private void HandleEducationsChanged(List<EducationRequestDto> newEducations)
    {
        educations = newEducations;
    }

    private void HandleProjectsChanged(List<ProjectRequestDto> newProjects)
    {
        projects = newProjects;
    }

    private void HandleSkillsChanged(List<string> newSkills)
    {
        skills = newSkills;
    }

    private void HandleInterestsChanged(List<string> newInterests)
    {
        interests = newInterests;
    }

    private async Task Submit()
    {
        var resume = new ResumeRequestDto
        {
            FirstName = FirstName,
            LastName = LastName,
            Email = Email,
            Phone = Phone,
            Position = Position,
            Experiences = experiences,
            Educations = educations,
            Projects = projects,
            Skills = skills,
            Interests = interests
        };
        isSubmitting = true;
        resumeDto = await ResumeApiClient.GenerateResumeAsync(resume);
        isSubmitting = false;
        isGenerated = true;
    }

    private async Task DownloadResume()
    {
        var response = await ResumeApiClient.DownloadResumeAsync(resumeDto);

        if (response.IsSuccessStatusCode)
        {
            var contentDisposition = response.Content.Headers.ContentDisposition;
            var filename = contentDisposition?.FileName ?? "Resume.pdf";
            var contentType = response.Content.Headers.ContentType.MediaType;

            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            var byteBase64 = Convert.ToBase64String(fileBytes);

            await JS.InvokeAsync<string>("saveAsFile", filename, Convert.ToBase64String(fileBytes));
        }
        else
        {
            // Handle error
            Console.WriteLine("Download failed.");
        }
    }
}
