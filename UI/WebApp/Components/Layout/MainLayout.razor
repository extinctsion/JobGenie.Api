@inherits LayoutComponentBase
<style>
    body {
        background: rgb(80,28,171);
        background: linear-gradient(163deg, rgba(80,28,171,0.5579481792717087) 0%, rgba(194,134,193,0) 29%, rgba(238,174,202,0) 50%, rgba(211,187,211,0) 67%, rgba(148,218,233,1) 100%);
        min-height: 100vh;
    }
</style>
<header class="container-fluid py-3 px-4">
    <nav class="navbar navbar-expand-lg mb-0 mb-lg-5">
        <a href="/" class="navbar-brand">
            <img src="/assets/img/logo.png" alt="logo" style="height:55px" />
        </a>

        <button class="navbar-toggler toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <i class="fa-solid fa-bars"></i>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav navigation me-auto ms-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="#Home">Home</a>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="generateresume">Resume</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="mocktest">Mock Test</NavLink>
                </li>
            </ul>
            <div class="nav-btn">
                <NavLink type="button" class="get-start btn btn-outline-primary px-4 rounded-pill" Href="generateresume" style="color: #501cab; display:none">
                    Let's Get started
                </NavLink>
            </div>
        </div>
    </nav>
</header>
@Body
<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };
    }


    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
        {
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
        };

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff33",
            DrawerIcon = "#92929f",
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2d80",
        };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}


